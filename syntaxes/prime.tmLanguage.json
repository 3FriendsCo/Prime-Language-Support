{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Prime",
  "file_extensions": ["prime"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#liberate" },
    { "include": "#headerFile" },
    { "include": "#charValue" },
    { "include": "#keywords" },
    { "include": "#numerics" },
    { "include": "#function_calls" },
    { "include": "#class_name" },
    { "include": "#object" },
    { "include": "#structure" },
    { "include": "#variables_and_definition" },
    { "include": "#strings" },
    { "include": "#constants" },
    { "include": "#semicolons_and_colons" },
    { "include": "#file" }
  ],
  "repository": {
    "liberate": {
      "patterns": [
        {
          "name": "keyword.control.prime",
          "match": "\\b(liberate|include|import)\\b"
        }
      ]
    },
    "headerFile": {
      "patterns": [
        {
          "name": "string.prime",
          "match": "\\b(interface|timeline|filestream|math|colorLib|system|cPackage)\\b"
        }
      ]
    },

    "constants": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(null|true|false|ref|ptr)\\b"
        },
        {
          "name": "constant.numeric.prime",
          "match": "\\b([0-9]+(?:\\.[0-9]+)?)\\b"
        }
      ]
    },
    "semicolons_and_colons": {
      "patterns": [
        {
          "name": "punctuation.terminator.prime",
          "match": ";|:|,"
        }
      ]
    },
    "charValue": {
      "patterns": [
        { "name": "string.quoted.single.prime", "match": "'([a-zA-Z])'" }
      ]
    },
    "numerics": {
      "patterns": [
        {
          "name": "constant.numeric.prime",
          "match": "\\b([0-9]+(?:\\.[0-9]+)?)\\b"
        }
      ]
    },
    "variables_and_definition": {
      "patterns": [
        {
          "name": "storage.type.prime",
          "match": "\\b(int|boolean|char|long|long long|short|double|float|let|const|i8|i16|i32|i64|u8|u16|u32|u64)\\b"
        },
        {
          "name": "storage.type.prime",
          "match": "\\b(main|fn|function|class|public|private|static)\\b"
        },
        {
          "name": "keyword.operator.prime",
          "match": "(\\*|\\+|-|%|=)"
        },
        {
          "name": "support.class.prime",
          "match": "\\b(string)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.prime",
          "match": "\\b(if|else|else if|while|return|break|continue)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.prime",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        { "name": "constant.character.escape.prime", "match": "\\\\." }
      ]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line.prime", "match": "\\s*//.*$" },
        { "name": "comment.block.prime", "begin": "/\\*", "end": "\\*/" }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "name": "support.function.prime",
          "match": "\\b[a-zA-Z_]\\w*\\s*\\("
        },
        {
          "name": "storage.type.prime",
          "match": "\\b(int|boolean|char|long|long long|short|double|float|let|const|i8|i16|i32|i64|u8|u16|u32|u64)\\b"
        }
      ]
    },
    "class_name": {
      "patterns": [
        { "name": "support.class.prime", "match": "\\b([a-zA-Z]+)\\s*\\{" }
      ]
    },
    "structure": {
      "patterns": [
        { "name": "support.function.prime", "match": "\\b(structure)\\b" }
      ]
    },
    "file": {
      "patterns": [{ "name": "support.class.prime", "match": "\\b(file)\\b" }]
    }
  },
  "scopeName": "source.pri"
}

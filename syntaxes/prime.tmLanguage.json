{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Prime",
  "file_extensions": ["prime"],

  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#liberate"
    },
    {
      "include": "#headerFile"
    },
    {
      "include": "#main"
    },
    {
      "include": "#null"
    },
    {
      "include": "#boolean"
    },
    {
      "include": "#charValue"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#numerics"
    },
    {
      "include": "#reference"
    },
    {
      "include": "#pointer"
    },
    {
      "include": "#void"
    },
    {
      "include": "#function_calls"
    },
    {
      "include": "#class"
    },
    {
      "include": "#class_name"
    },
    {
      "include": "#object"
    },
    {
      "include": "#structure"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#file"
    }
  ],

  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.prime",
          "match": "§.*$"
        },
        {
          "name": "comment.block.prime",
          "begin": "\\§*",
          "end": "\\*§"
        }
      ]
    },

    "liberate": {
      "patterns": [
        {
          "name": "keyword.control.prime",
          "match": "\\b(liberate)\\b"
        }
      ]
    },

    "headerFile": {
      "patterns": [
        {
          "name": "string.prime",
          "match": "\\b(interface|timeline|filestream|stringstream|math)\\b"
        }
      ]
    },

    "main": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(main)\\b"
        }
      ]
    },

    "null": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(null)\\b"
        }
      ]
    },

    "boolean": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(true|false)\\b"
        }
      ]
    },

    "charValue": {
      "patterns": [
        {
          "name": "string.quoted.double.prime",
          "match": "\\'([a-zA-Z])\\'"
        }
      ]
    },

    "numerics": {
      "patterns": [
        {
          "name": "constant.numeric.prime",
          "match": "\\b([0-9]+)\\b"
        }
      ]
    },

    "variables": {
      "patterns": [
        {
          "name": "variable.prime",
          "match": "\\b(int|float|double|boolean|char|string)\\b"
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.prime",
          "match": "\\b(if|while|loop|return|switch|continue|break)\\b"
        }
      ]
    },

    "strings": {
      "name": "string.quoted.double.prime",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.prime",
          "match": "\\\\."
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment.line.prime",
          "match": "§.*$"
        },
        {
          "name": "comment.block.prime",
          "begin": "\\§*",
          "end": "\\*§"
        }
      ]
    },

    "reference": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(ref)\\b"
        }
      ]
    },

    "pointer": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(ptr)\\b"
        }
      ]
    },

    "void": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(function)\\b"
        }
      ]
    },

    "function_calls": {
      "patterns": [
        {
          "name": "support.function.prime",
          "match": "\\b[a-zA-Z_]\\w*\\("
        }
      ]
    },

    "class": {
      "patterns": [
        {
          "name": "constant.language.prime",
          "match": "\\b(class)\\b"
        }
      ]
    },

    "class_name": {
      "patterns": [
        {
          "name": "support.class.prime",
          "match": "\\b([a-zA-Z]+)\\{"
        }
      ]
    },

    "structure": {
      "patterns": [
        {
          "name": "support.function.prime",
          "match": "\\b(structure)\\b"
        }
      ]
    },

    "file": {
      "patterns": [
        {
          "name": "support.class.prime",
          "match": "\\b(file)\\b"
        }
      ]
    }
  },
  "scopeName": "source.pri"
}
